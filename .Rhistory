quit()
n
quit()
n
dataset
moda
install.packages("RSQLite")
6
dog_walking
dog_walking <- dbGetQuery(con, "SELECT * FROM dog_walking)
dbDisconnect(con)
)
con <- dbConnect(SQLite(), dbname = "dog_walking.db")
dataset <- dbGetQuery(con, "SELECT * FROM dog_walking")
dbDisconnect
dataset
library(psych)
describe(dataset, na.rm = TRUE)
dbExecute(con, "
CREATE TABLE dog_walking (
condition VARCHAR(20),
num_social_encounters INTEGER
);
")
dbExecute(con, "DROP TABLE IF EXISTS dog_walking")
rm dataset
rm (dataset)
dbExecute(con, "
CREATE TABLE dog_walking (
condition VARCHAR(20),
num_social_encounters INTEGER
);
")
dbExecute(con, "
CREATE TABLE cane_walking (
condition VARCHAR(20),
num_social_encounters INTEGER
);
")
con <- dbConnect(SQLite(), dbname = "dog_walking.db")
dbExecute(con, "
CREATE TABLE dog_walking (
condition VARCHAR(20),
num_social_encounters INTEGER
);
")
data <- data.frame(
condition = c("Walking with a dog", "Walking with a dog", "Walking with a dog", "Walking with a dog", "Walking with a dog", "Walking with a dog", "Walking without a dog", "Walking without a dog", "Walking without a dog", "Walking without a dog", "Walking without a dog", "Walking without a dog"),
num_social_encounters = c(9, 7, 10, 12, 6, 8, 4, 5, 3, 6, 5, 1)
)
dbWriteTable(con, "dog_walking", data, append = TRUE)
dbDisconnect(con)
confidence_interval <- t.test(walkin_dog)$conf.init
confidence_interval
intervallo_confidenza <- t.test(walkin_dog, conf.level = 0.95)$conf.int
intervallo_confidenza
data_colors
data_colors(head)
install.packages("data.table")
install.packages("magrittr")
library(data.table)
library(magrittr)
install.packages("DT")
library(DT)
dt(data_colors)
data_colors
4
install.packages("RSQLite")
install.packages("haven")
install.packages("DBI")
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
# Inizializzazione dei valori
voti <- c(80, 85, 90, 95)
# Calcolo della media
media <- mean(voti)
# Visualizzazione della media
media
# Dataset di esempio
dati <- c(2, 3, 5, 6, 8, 10, 12, 15)
# Calcolo della mediana
mediana <- median(dati)
# Stampa il risultato
mediana
# Creazione dei dati di esempio
valori <- c(10, 5, 8, 2)
# Calcolo del ranking dei valori
ranking <- rank(-valori, ties.method = "min")
# Visualizzazione del ranking
ranking
barplot(conteggio_colore, main = "Preferenza di colore",
xlab = "Colore", ylab = "Numero di persone",
names.arg = etichette_colori)
conteggio_colore <- table(colors_data$COLOUR)
library(haven)
library(DBI)
con <- dbConnect(RSQLite::SQLite(), dbname= "~/Statistica/dog_walking.db")
colors_data <- dbReadTable(con, "colors")
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
# Inizializzazione dei valori
voti <- c(80, 85, 90, 95)
# Calcolo della media
media <- mean(voti)
# Visualizzazione della media
media
# Dataset di esempio
dati <- c(2, 3, 5, 6, 8, 10, 12, 15)
# Calcolo della mediana
mediana <- median(dati)
# Stampa il risultato
mediana
# Creazione dei dati di esempio
valori <- c(10, 5, 8, 2)
# Calcolo del ranking dei valori
ranking <- rank(-valori, ties.method = "min")
# Visualizzazione del ranking
ranking
library(ggplot2)
ggplot (survey, aes(x = procrastination, y = statistics_anxiety)) +
geom_point() +
labs(title = "Scatterplot of Statistics Anxiety and Procrastination",
x = "Statistics Anxiety",
y = "Procrastination")
library(RSQLite)
library(dplyr)
install.packages("dplyr")
library(RSQLite)
library(dplyr)
# Connect to the SQLite database
con <- dbConnect(SQLite(), dbname = "/Users/enricopirani/Statistica/datasets_vari.db")
library(RSQLite)
library(dplyr)
# Connect to the SQLite database
con <- dbConnect(SQLite(), dbname = "datasets_vari.db")
# Retrieve data from the SQLite table
survey <- dbReadTable(con, "survey_data")
dbDisconnect(con)
library(haven)
library(DBI)
con <- dbConnect(RSQLite::SQLite(), dbname= "dog_walking.db")
colors_data <- dbReadTable(con, "colors")
View(walkin_dog)
library(RSQLite)
library(dplyr)
# Connect to the SQLite database
con <- dbConnect(SQLite(), dbname = "datasets_vari.db")
# Retrieve data from the SQLite table
survey <- dbReadTable(con, "survey_data")
dbDisconnect(con)
library(ggplot2)
ggplot (survey, aes(x = procrastination, y = statistics_anxiety)) +
geom_point() +
labs(title = "Scatterplot of Statistics Anxiety and Procrastination",
x = "Statistics Anxiety",
y = "Procrastination")
library(ggplot2)
ggplot (survey, aes(x = statistics_anxiety, y = procrastination)) +
geom_point() +
labs(title = "Scatterplot of Statistics Anxiety and Procrastination",
x = "Statistics Anxiety",
y = "Procrastination")
View(survey)
View(survey)
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
# Inizializzazione dei valori
voti <- c(80, 85, 90, 95)
# Calcolo della media
media <- mean(voti)
# Visualizzazione della media
media
# Dataset di esempio
dati <- c(2, 3, 5, 6, 8, 10, 12, 15)
# Calcolo della mediana
mediana <- median(dati)
# Stampa il risultato
mediana
# Creazione dei dati di esempio
valori <- c(10, 5, 8, 2)
# Calcolo del ranking dei valori
ranking <- rank(-valori, ties.method = "min")
# Visualizzazione del ranking
ranking
library(ggplot2)
ggplot (survey, aes(x = procrastination, y = statistics_anxiety)) +
geom_point() +
labs(title = "Scatterplot of Statistics Anxiety and Procrastination",
x = "Statistics Anxiety",
y = "Procrastination")
library(ggplot2)
ggplot (survey, aes(x = statistics_anxiety, y = procrastination)) +
geom_point() +
labs(title = "Scatterplot of Statistics Anxiety and Procrastination",
x = "Statistics Anxiety",
y = "Procrastination")
library(ggplot2)
mtcars2 <- mtcars
mtcars2$am <- factor(
mtcars$am, labels = c('automatic', 'manual')
)
ggplot(mtcars2, aes(hp, mpg, color = am)) +
geom_point() + geom_smooth() +
theme(legend.position = 'bottom')
ggplot(diamonds, aes(carat, price)) + geom_smooth() +
facet_grid(~ cut)
ggplot(diamonds, aes(cut, price)) + geom_boxplot()
knitr::kable(
mtcars[1:6, 1:6], caption = 'A subset of mtcars.'
)
p <- ggplot(mtcars2, aes(hp, mpg, color = am)) +
geom_point()
p
p + geom_smooth()
p
p + geom_smooth(method = 'lm')
knitr::kable(head(iris, 15))
p
knitr::kable(head(iris, 12))
p + geom_smooth(method = 'lm')
knitr::kable(head(iris, 5))
# a boxplot of weight vs transmission; this figure
# will be placed in the margin
ggplot(mtcars2, aes(am, wt)) + geom_boxplot() +
coord_flip()
# a figure in the main column
p <- ggplot(mtcars, aes(wt, hp)) + geom_point()
p
# a fullwidth figure
p + geom_smooth(method = 'lm') + facet_grid(~ gear)
# create a bib file for the R packages used in this document
knitr::write_bib(c('base', 'rmarkdown'), file = 'skeleton.bib')
source("~/Documents/Statistica/stock_market_download_and_chart.R")
library(quantmod)
library(PerformanceAnalytics)
library(TTR)
getSymbols("BTC-USD", src = "yahoo", from = "2019-01-01")
getSymbols("ETH-USD", src = "yahoo", from = "2019-01-01")
getSymbols("BNB-USD", src = "yahoo", from = "2019-01-01")
getSymbols("ADA-USD", src = "yahoo", from = "2019-01-01")
getSymbols("XRP-USD", src = "yahoo", from = "2019-01-01")
getSymbols("SOL-USD", src = "yahoo", from = "2020-01-01")
barChart(`BTC-USD`, theme = chartTheme("black"))
barChart(`BNB-USD`, theme = chartTheme("black"))
barChart(`ETH-USD`, theme = chartTheme("black"))
barChart(`ADA-USD`, theme = chartTheme("black"))
barChart(`XRP-USD`, theme = chartTheme("black"))
barChart(`SOL-USD`, theme = chartTheme("black"))
BTC <- `BTC-USD`
ETH <- `ETH-USD`
BNB <- `BNB-USD`
ADA <- `ADA-USD`
XRP <- `XRP-USD`
# 1. BTC-USD
sma50_btc <- SMA(BTC$`BTC-USD.Close`, n = 50)
sma100_btc <- SMA(BTC$`BTC-USD.Close`, n = 100)
lineChart(`BTC-USD`, theme = chartTheme("black"))
addSMA(n = 50, col = "blue")
addSMA(n = 100, col = "orange")
legend("left",
col = c("green", "blue", "orange"),
legend = c("BTC-USD", "SMA50", "SMA100"), lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
# 2. ETH-USD
sma50_btc <- SMA(ETH$`ETH-USD.Close`, n = 50)
sma100_btc <- SMA(ETH$`ETH-USD.Close`, n = 100)
lineChart(`ETH-USD`, theme = chartTheme("black"))
addSMA(n = 50, col = "blue")
addSMA(n = 100, col = "orange")
legend("left",
col = c("green", "blue", "orange"),
legend = c("ETH-USD", "SMA50", "SMA100"), lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
sma50_btc <- SMA(ADA$`ADA-USD.Close`, n = 50)
sma100_btc <- SMA(ADA$`ADA-USD.Close`, n = 100)
lineChart(`ADA-USD`, theme = chartTheme("black"))
addSMA(n = 50, col = "blue")
addSMA(n = 100, col = "orange")
legend("left",
col = c("green", "blue", "orange"),
legend = c("ADA-USD", "SMA50", "SMA100"), lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
sma50_btc <- SMA(BNB$`BNB-USD.Close`, n = 50)
sma100_btc <- SMA(BNB$`BNB-USD.Close`, n = 100)
lineChart(`BNB-USD`, theme = chartTheme("black"))
addSMA(n = 50, col = "blue")
addSMA(n = 100, col = "orange")
legend("left",
col = c("green", "blue", "orange"),
legend = c("BNB-USD", "SMA50", "SMA100"), lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
sma50_btc <- SMA(XRP$`XRP-USD.Close`, n = 50)
sma100_btc <- SMA(XRP$`XRP-USD.Close`, n = 100)
lineChart(`XRP-USD`, theme = chartTheme("black"))
addSMA(n = 50, col = "blue")
addSMA(n = 100, col = "orange")
legend("left",
col = c("green", "blue", "orange"),
legend = c("BNB-USD", "SMA50", "SMA100"), lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
# 1.BTC
cci_BTC <- CCI(HLC(BTC), n = 20, c = 0.015)
barChart(BTC, theme = "black")
addCCI(n = 20, c = 0.015)
# 2.ETH
cci_eth <- CCI(HLC(ETH), n = 20, c = 0.015)
barChart(ETH, theme = "black")
addCCI(n = 20, c = 0.015)
# 3.BNB
cci_BNB <- CCI(HLC(BNB), n = 20, c = 0.015)
barChart(BNB, theme = "black")
addCCI(n = 20, c = 0.015)
# 4. XRP
cci_XRP <- CCI(HLC(XRP), n = 20, c = 0.015)
barChart(XRP, theme = "black")
addCCI(n = 20, c = 0.015)
# 5.ADA
cci_ADA <- CCI(HLC(ADA), n = 20, c = 0.015)
barChart(ADA, theme = "black")
addCCI(n = 20, c = 0.015)
# 1. BTC
roc_btc <- ROC(BTC$`BTC-USD.Close`, n = 25)
barChart(BTC, theme = "black")
addROC(n = 25)
legend("left",
col = "red", legend = "ROC(25)", lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
roc_ETH <- ROC(ETH$`ETH-USD.Close`, n = 25)
barChart(ETH, theme = "black")
addROC(n = 25)
legend("left",
col = "red", legend = "ROC(25)", lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
roc_BNB <- ROC(BNB$`BNB-USD.Close`, n = 25)
barChart(BNB, theme = "black")
addROC(n = 25)
legend("left",
col = "red", legend = "ROC(25)", lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
roc_XRP <- ROC(XRP$`XRP-USD.Close`, n = 25)
barChart(XRP, theme = "black")
addROC(n = 25)
legend("left",
col = "red", legend = "ROC(25)", lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
roc_ADA <- ROC(ADA$`ADA-USD.Close`, n = 25)
barChart(ADA, theme = "black")
addROC(n = 25)
legend("left",
col = "red", legend = "ROC(25)", lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
# Set the number of successes (3 heads)
x <- 3
# Set the number of trials (5 coin flips)
size <- 5
# Set the probability of success (0.5 for a fair coin)
prob <- 0.5
# Calculate the probability using the dbinom function
probability <- dbinom(x, size, prob)
# Print the result
print(probability)
data <- rnorm(1000, mean = 0, sd = 1)
# Plot a histogram of the data
hist(data, breaks = 30, col = "skyblue", main = "Normal Distribution", xlab = "Values", ylab = "Frequency")
# Add a curve representing the probability density function of the normal distribution
curve(dnorm(x, mean = mean(data), sd = sd(data)), add = TRUE, col = "red")
sma50_btc <- SMA(SOL$`SOL-USD.Close`, n = 50)
BTC <- `BTC-USD`
ETH <- `ETH-USD`
BNB <- `BNB-USD`
ADA <- `ADA-USD`
XRP <- `XRP-USD`
SOL <- `SOL-USD`
sma50_btc <- SMA(SOL$`SOL-USD.Close`, n = 50)
sma100_btc <- SMA(SOL$`SOL-USD.Close`, n = 100)
lineChart(`SOL-USD`, theme = chartTheme("white"))
addSMA(n = 50, col = "blue")
addSMA(n = 100, col = "orange")
legend("left",
col = c("green", "blue", "orange"),
legend = c("SOL-USD", "SMA50", "SMA100"), lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
sma50_btc <- SMA(BNB$`BNB-USD.Close`, n = 50)
sma100_btc <- SMA(BNB$`BNB-USD.Close`, n = 100)
lineChart(`BNB-USD`, theme = chartTheme("white"))
addSMA(n = 50, col = "blue")
addSMA(n = 100, col = "orange")
legend("left",
col = c("green", "blue", "orange"),
legend = c("BNB-USD", "SMA50", "SMA100"), lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
sma50_btc <- SMA(BNB$`BNB-USD.Close`, n = 50)
sma100_btc <- SMA(BNB$`BNB-USD.Close`, n = 100)
lineChart(`BNB-USD`, theme = chartTheme("white"))
addSMA(n = 50, col = "blue")
addSMA(n = 100, col = "orange")
legend("left",
col = c("green", "blue", "orange"),
legend = c("BNB-USD", "SMA50", "SMA100"), lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
unlink("cripto_update_cache", recursive = TRUE)
library(quantmod)
library(PerformanceAnalytics)
library(TTR)
getSymbols("BTC-USD", src = "yahoo", from = "2019-01-01")
getSymbols("ETH-USD", src = "yahoo", from = "2019-01-01")
getSymbols("BNB-USD", src = "yahoo", from = "2019-01-01")
getSymbols("ADA-USD", src = "yahoo", from = "2019-01-01")
getSymbols("XRP-USD", src = "yahoo", from = "2019-01-01")
getSymbols("SOL-USD", src = "yahoo", from = "2020-01-01")
barChart(`BTC-USD`, theme = chartTheme("black"))
barChart(`BNB-USD`, theme = chartTheme("black"))
barChart(`ETH-USD`, theme = chartTheme("black"))
barChart(`ADA-USD`, theme = chartTheme("black"))
barChart(`XRP-USD`, theme = chartTheme("black"))
barChart(`SOL-USD`, theme = chartTheme("black"))
BTC <- `BTC-USD`
ETH <- `ETH-USD`
BNB <- `BNB-USD`
ADA <- `ADA-USD`
XRP <- `XRP-USD`
SOL <- `SOL-USD`
# 1. BTC-USD
sma50_btc <- SMA(BTC$`BTC-USD.Close`, n = 50)
# 2. ETH-USD
sma50_btc <- SMA(ETH$`ETH-USD.Close`, n = 50)
# Replace NAs with the mean of the column
BTC$`BTC-USD.Close`[is.na(BTC$`BTC-USD.Close`)] <- mean(BTC$`BTC-USD.Close`, na.rm = TRUE)
# Calculate moving averages
sma50_btc <- SMA(BTC$`BTC-USD.Close`, n = 50)
sma100_btc <- SMA(BTC$`BTC-USD.Close`, n = 100)
# Plot the data
lineChart(`BTC-USD`, theme = chartTheme("black"))
addSMA(n = 50, col = "blue")
addSMA(n = 100, col = "orange")
# Add legend
legend("left",
col = c("green", "blue", "orange"),
legend = c("BTC-USD", "SMA50", "SMA100"), lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
# 1. BTC
roc_btc <- ROC(BTC$`BTC-USD.Close`, n = 25)
barChart(BTC, theme = "black")
addROC(n = 25)
legend("left",
col = "red", legend = "ROC(25)", lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
roc_ETH <- ROC(ETH$`ETH-USD.Close`, n = 25)
barChart(ETH, theme = "black")
addROC(n = 25)
legend("left",
col = "red", legend = "ROC(25)", lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
roc_BNB <- ROC(BNB$`BNB-USD.Close`, n = 25)
barChart(BNB, theme = "black")
addROC(n = 25)
legend("left",
col = "red", legend = "ROC(25)", lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
roc_XRP <- ROC(XRP$`XRP-USD.Close`, n = 25)
barChart(XRP, theme = "black")
addROC(n = 25)
legend("left",
col = "red", legend = "ROC(25)", lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
roc_ADA <- ROC(ADA$`ADA-USD.Close`, n = 25)
barChart(ADA, theme = "black")
addROC(n = 25)
legend("left",
col = "red", legend = "ROC(25)", lty = 1, bty = "n",
text.col = "white", cex = 0.8
)
# Set the number of successes (3 heads)
x <- 3
# Set the number of trials (5 coin flips)
size <- 5
# Set the probability of success (0.5 for a fair coin)
prob <- 0.5
# Calculate the probability using the dbinom function
probability <- dbinom(x, size, prob)
# Print the result
print(probability)
data <- rnorm(1000, mean = 0, sd = 1)
# Plot a histogram of the data
hist(data, breaks = 30, col = "skyblue", main = "Normal Distribution", xlab = "Values", ylab = "Frequency")
# Add a curve representing the probability density function of the normal distribution
curve(dnorm(x, mean = mean(data), sd = sd(data)), add = TRUE, col = "red")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
